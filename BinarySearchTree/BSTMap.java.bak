import java.util.*;

public class BSTMap<K extends Comparable<K>, V > implements  Map<K, V>  {
    
	BinarySearchTree<K,V> bst;

	public BSTMap () {
		bst = new BinarySearchTree<K,V>();
	}

	public boolean containsKey(K key) {
		try{
			bst.find(key);
		}catch(KeyNotFoundException e){
			return false; // so it compiles
		}
		
		return true;
	}

	public V get (K key) throws KeyNotFoundException {
		// TODO: implement this
		V val = bst.find(key);
		
		return val; // so it compiles
	}

	public List<Entry<K,V> >	entryList() {
		// TODO: implement this
		List<Entry<K,V>> result = bst.entryList();
		return result; // so it compiles
	}

	public void put (K key, V value) {
		// TODO: implement this
		bst.insert(key, value);
	}

	public int size() {
		// TODO: implement this
		int size = bst.size();
		return size; // so it compiles
	}

	public void clear() {
		// TODO: implement this
		bst.clear();
	}

}